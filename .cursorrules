# Project Instructions

Use specification and guidelines as you build the app.

Write the complete code for every step. Do not get lazy.

Your goal is to completely finish whatever I ask for.

You will see <ai_context> tags in the code. These are context tags that you should use to help you understand the codebase.

## Overview

This is a web app template.

## Tech Stack

- Frontend: Next.js, Tailwind, Shadcn, Framer Motion
- Backend: Postgres, Supabase, Drizzle ORM, Server Actions
- Auth: Clerk
- Deployment: Vercel

## Project Structure

- `actions` - Server actions
  - `db` - Database related actions
  - Other actions
- `app` - Next.js app router
  - `api` - API routes
  - `route` - An example route
    - `_components` - One-off components for the route
    - `layout.tsx` - Layout for the route
    - `page.tsx` - Page for the route
- `components` - Shared components
  - `ui` - UI components
  - `utilities` - Utility components
- `db` - Database
  - `schema` - Database schemas
- `lib` - Library code
  - `hooks` - Custom hooks
- `prompts` - Prompt files
- `public` - Static assets
- `types` - Type definitions

## Rules

Follow these rules when building the app.

### General Rules

- Use `@` to import anything from the app unless otherwise specified
- Use kebab case for all files and folders unless otherwise specified
- Don't update shadcn components unless otherwise specified

#### Env Rules

- If you update environment variables, update the `.env.example` file
- All environment variables should go in `.env.local`
- Do not expose environment variables to the frontend
- Use `NEXT_PUBLIC_` prefix for environment variables that need to be accessed from the frontend
- You may import environment variables in server actions and components by using `process.env.VARIABLE_NAME`

#### Type Rules

Follow these rules when working with types.

- When importing types, use `@/types`
- Name files like `example-types.ts`
- All types should go in `types`
- Make sure to export the types in `types/index.ts`
- Prefer interfaces over type aliases
- If referring to db types, use `@/db/schema` such as `SelectTodo` from `todos-schema.ts`

An example of a type:

`types/actions-types.ts`

```ts
export type ActionState<T> =
  | { isSuccess: true; message: string; data: T }
  | { isSuccess: false; message: string; data?: never }
```

And exporting it:

`types/index.ts`

```ts
export * from "./actions-types"
```

### Frontend Rules

Follow these rules when working on the frontend.

It uses Next.js, Tailwind, Shadcn, and Framer Motion.

#### General Rules

- Use `lucide-react` for icons
- useSidebar must be used within a SidebarProvider

#### Components

- Use divs instead of other html tags unless otherwise specified
- Separate the main parts of a component's html with an extra blank line for visual spacing
- Always tag a component with either `use server` or `use client` at the top, including layouts and pages

##### Organization

- All components be named using kebab case like `example-component.tsx` unless otherwise specified
- Put components in `/_components` in the route if one-off components
- Put components in `/components` from the root if shared components

##### Data Fetching

- Fetch data in server components and pass the data down as props to client components.
- Use server actions from `/actions` to mutate data.

##### Server Components

- Use `"use server"` at the top of the file.
- Implement Suspense for asynchronous data fetching to show loading states while data is being fetched.
- If no asynchronous logic is required for a given server component, you do not need to wrap the component in `<Suspense>`. You can simply return the final UI directly since there is no async boundary needed.
- If asynchronous fetching is required, you can use a `<Suspense>` boundary and a fallback to indicate a loading state while data is loading.
- Server components cannot be imported into client components. If you want to use a server component in a client component, you must pass the as props using the "children" prop
- params in server pages should be awaited such as `const { courseId } = await params` where the type is `params: Promise<{ courseId: string }>`

Example of a server layout:

```tsx
"use server"

export default async function ExampleServerLayout({
  children
}: {
  children: React.ReactNode
}) {
  return children
}
```

Example of a server page (with async logic):

```tsx
"use server"

import { Suspense } from "react"
import { SomeAction } from "@/actions/some-actions"
import SomeComponent from "./_components/some-component"
import SomeSkeleton from "./_components/some-skeleton"

export default async function ExampleServerPage() {
  return (
    <Suspense fallback={<SomeSkeleton className="some-class" />}>
      <SomeComponentFetcher />
    </Suspense>
  )
}

async function SomeComponentFetcher() {
  const { data } = await SomeAction()
  return <SomeComponent className="some-class" initialData={data || []} />
}
```

Example of a server page (no async logic required):

```tsx
"use server"

import SomeClientComponent from "./_components/some-client-component"

// In this case, no asynchronous work is being done, so no Suspense or fallback is required.
export default async function ExampleServerPage() {
  return <SomeClientComponent initialData={[]} />
}
```

Example of a server component:

```tsx
"use server"

interface ExampleServerComponentProps {
  // Your props here
}

export async function ExampleServerComponent({
  props
}: ExampleServerComponentProps) {
  // Your code here
}
```

##### Client Components

- Use `"use client"` at the top of the file
- Client components can safely rely on props passed down from server components, or handle UI interactions without needing <Suspense> if there's no async logic.
- Never use server actions in client components. If you need to create a new server action, create it in `/actions`

Example of a client page:

```tsx
"use client"

export default function ExampleClientPage() {
  // Your code here
}
```

Example of a client component:

```tsx
"use client"

interface ExampleClientComponentProps {
  initialData: any[]
}

export default function ExampleClientComponent({
  initialData
}: ExampleClientComponentProps) {
  // Client-side logic here
  return <div>{initialData.length} items</div>
}
```

### Backend Rules

Follow these rules when working on the backend.

It uses Postgres, Supabase, Drizzle ORM, and Server Actions.

#### General Rules

- Never generate migrations. You do not have to do anything in the `db/migrations` folder inluding migrations and metadata. Ignore it.

#### Organization

#### Schemas

- When importing schemas, use `@/db/schema`
- Name files like `example-schema.ts`
- All schemas should go in `db/schema`
- Make sure to export the schema in `db/schema/index.ts`
- Make sure to add the schema to the `schema` object in `db/db.ts`
- If using a userId, always use `userId: text("user_id").notNull()`
- Always include createdAt and updatedAt columns in all tables
- Make sure to cascade delete when necessary
- Use enums for columns that have a limited set of possible values such as:

```ts
import { pgEnum } from "drizzle-orm/pg-core"

export const membershipEnum = pgEnum("membership", ["free", "pro"])

membership: membershipEnum("membership").notNull().default("free")
```

Example of a schema:

`db/schema/todos-schema.ts`

```ts
import { boolean, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"

export const todosTable = pgTable("todos", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  content: text("content").notNull(),
  completed: boolean("completed").default(false).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertTodo = typeof todosTable.$inferInsert
export type SelectTodo = typeof todosTable.$inferSelect
```

And exporting it:

`db/schema/index.ts`

```ts
export * from "./todos-schema"
```

And adding it to the schema in `db/db.ts`:

`db/db.ts`

```ts
import { todosTable } from "@/db/schema"

const schema = {
  todos: todosTable
}
```

And a more complex schema:

```ts
import { pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"

export const chatsTable = pgTable("chats", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  name: text("name").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertChat = typeof chatsTable.$inferInsert
export type SelectChat = typeof chatsTable.$inferSelect
```

```ts
import { pgEnum, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"
import { chatsTable } from "./chats-schema"

export const roleEnum = pgEnum("role", ["assistant", "user"])

export const messagesTable = pgTable("messages", {
  id: uuid("id").defaultRandom().primaryKey(),
  chatId: uuid("chat_id")
    .references(() => chatsTable.id, { onDelete: "cascade" })
    .notNull(),
  content: text("content").notNull(),
  role: roleEnum("role").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertMessage = typeof messagesTable.$inferInsert
export type SelectMessage = typeof messagesTable.$inferSelect
```

And exporting it:

`db/schema/index.ts`

```ts
export * from "./chats-schema"
export * from "./messages-schema"
```

And adding it to the schema in `db/db.ts`:

`db/db.ts`

```ts
import { chatsTable, messagesTable } from "@/db/schema"

const schema = {
  chats: chatsTable,
  messages: messagesTable
}
```

#### Server Actions

- When importing actions, use `@/actions` or `@/actions/db` if db related
- DB related actions should go in the `actions/db` folder
- Other actions should go in the `actions` folder
- Name files like `example-actions.ts`
- All actions should go in the `actions` folder
- Only write the needed actions
- Return an ActionState with the needed data type from actions
- Include Action at the end of function names `Ex: exampleFunction -> exampleFunctionAction`
- Actions should return a Promise<ActionState<T>>
- Sort in CRUD order: Create, Read, Update, Delete
- Make sure to return undefined as the data type if the action is not supposed to return any data
- **Date Handling:** For columns defined as `PgDateString` (or any date string type), always convert JavaScript `Date` objects to ISO strings using `.toISOString()` before performing operations (e.g., comparisons or insertions). This ensures value type consistency and prevents type errors.

```ts
export type ActionState<T> =
  | { isSuccess: true; message: string; data: T }
  | { isSuccess: false; message: string; data?: never }
```

Example of an action:

`actions/db/todos-actions.ts`

```ts
"use server"

import { db } from "@/db/db"
import { InsertTodo, SelectTodo, todosTable } from "@/db/schema/todos-schema"
import { ActionState } from "@/types"
import { eq } from "drizzle-orm"

export async function createTodoAction(
  todo: InsertTodo
): Promise<ActionState<SelectTodo>> {
  try {
    const [newTodo] = await db.insert(todosTable).values(todo).returning()
    return {
      isSuccess: true,
      message: "Todo created successfully",
      data: newTodo
    }
  } catch (error) {
    console.error("Error creating todo:", error)
    return { isSuccess: false, message: "Failed to create todo" }
  }
}

export async function getTodosAction(
  userId: string
): Promise<ActionState<SelectTodo[]>> {
  try {
    const todos = await db.query.todos.findMany({
      where: eq(todosTable.userId, userId)
    })
    return {
      isSuccess: true,
      message: "Todos retrieved successfully",
      data: todos
    }
  } catch (error) {
    console.error("Error getting todos:", error)
    return { isSuccess: false, message: "Failed to get todos" }
  }
}

export async function updateTodoAction(
  id: string,
  data: Partial<InsertTodo>
): Promise<ActionState<SelectTodo>> {
  try {
    const [updatedTodo] = await db
      .update(todosTable)
      .set(data)
      .where(eq(todosTable.id, id))
      .returning()

    return {
      isSuccess: true,
      message: "Todo updated successfully",
      data: updatedTodo
    }
  } catch (error) {
    console.error("Error updating todo:", error)
    return { isSuccess: false, message: "Failed to update todo" }
  }
}

export async function deleteTodoAction(id: string): Promise<ActionState<void>> {
  try {
    await db.delete(todosTable).where(eq(todosTable.id, id))
    return {
      isSuccess: true,
      message: "Todo deleted successfully",
      data: undefined
    }
  } catch (error) {
    console.error("Error deleting todo:", error)
    return { isSuccess: false, message: "Failed to delete todo" }
  }
}
```

### Auth Rules

Follow these rules when working on auth.

It uses Clerk for authentication.

#### General Rules

- Import the auth helper with `import { auth } from "@clerk/nextjs/server"` in server components
- await the auth helper in server actions

### Payments Rules

Follow these rules when working on payments.

It uses Stripe for payments.

# Storage Rules

Follow these rules when working with Supabase Storage.

It uses Supabase Storage for file uploads, downloads, and management.

## General Rules

- Always use environment variables for bucket names to maintain consistency across environments
- Never hardcode bucket names in the application code
- Always handle file size limits and allowed file types at the application level
- Use the `upsert` method instead of `upload` when you want to replace existing files
- Always implement proper error handling for storage operations
- Use content-type headers when uploading files to ensure proper file handling

## Organization

### Buckets

- Name buckets in kebab-case: `user-uploads`, `profile-images`
- Create separate buckets for different types of files (e.g., `profile-images`, `documents`, `attachments`)
- Document bucket purposes in a central location
- Set appropriate bucket policies (public/private) based on access requirements
- Implement RLS (Row Level Security) policies for buckets that need user-specific access
- Make sure to let me know instructions for setting up RLS policies on Supabase since you can't do this yourself, including the SQL scripts I need to run in the editor

### File Structure

- Organize files in folders based on their purpose and ownership
- Use predictable, collision-resistant naming patterns
- Structure: `{bucket}/{userId}/{purpose}/{filename}`
- Example: `profile-images/123e4567-e89b/avatar/profile.jpg`
- Include timestamps in filenames when version history is important
- Example: `documents/123e4567-e89b/contracts/2024-02-13-contract.pdf`

## Actions

- When importing storage actions, use `@/actions/storage`
- Name files like `example-storage-actions.ts`
- Include Storage at the end of function names `Ex: uploadFile -> uploadFileStorage`
- Follow the same ActionState pattern as DB actions

Example of a storage action:

```ts
"use server"

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"
import { ActionState } from "@/types"

export async function uploadFileStorage(
  bucket: string,
  path: string,
  file: File
): Promise<ActionState<{ path: string }>> {
  try {
    const supabase = createClientComponentClient()

    const { data, error } = await supabase.storage
      .from(bucket)
      .upload(path, file, {
        upsert: false,
        contentType: file.type
      })

    if (error) throw error

    return {
      isSuccess: true,
      message: "File uploaded successfully",
      data: { path: data.path }
    }
  } catch (error) {
    console.error("Error uploading file:", error)
    return { isSuccess: false, message: "Failed to upload file" }
  }
}
```

## File Handling

### Upload Rules

- Always validate file size before upload
- Implement file type validation using both extension and MIME type
- Generate unique filenames to prevent collisions
- Set appropriate content-type headers
- Handle existing files appropriately (error or upsert)

Example validation:

```ts
const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10MB
const ALLOWED_TYPES = ["image/jpeg", "image/png", "image/webp"]

function validateFile(file: File): boolean {
  if (file.size > MAX_FILE_SIZE) {
    throw new Error("File size exceeds limit")
  }

  if (!ALLOWED_TYPES.includes(file.type)) {
    throw new Error("File type not allowed")
  }

  return true
}
```

### Download Rules

- Always handle missing files gracefully
- Implement proper error handling for failed downloads
- Use signed URLs for private files

### Delete Rules

- Implement soft deletes when appropriate
- Clean up related database records when deleting files
- Handle bulk deletions carefully
- Verify ownership before deletion
- Always delete all versions/transforms of a file

## Security

### Bucket Policies

- Make buckets private by default
- Only make buckets public when absolutely necessary
- Use RLS policies to restrict access to authorized users
- Example RLS policy:

```sql
CREATE POLICY "Users can only access their own files"
ON storage.objects
FOR ALL
USING (auth.uid()::text = (storage.foldername(name))[1]);
```

### Access Control

- Generate short-lived signed URLs for private files
- Implement proper CORS policies
- Use separate buckets for public and private files
- Never expose internal file paths
- Validate user permissions before any operation

## Error Handling

- Implement specific error types for common storage issues
- Always provide meaningful error messages
- Implement retry logic for transient failures
- Log storage errors separately for monitoring

## Optimization

- Implement progressive upload for large files
- Clean up temporary files and failed uploads
- Use batch operations when handling multiple files

## Migration Strategy

The Manufacturing Efficiency Tracking System requires a migration from the existing contact application to a comprehensive industrial tracking platform. This document outlines the strategy for this transformation while preserving core architecture.

### Overview

We're preserving the core infrastructure of the app while significantly expanding its capabilities to include manufacturing-specific entities and relationships.

### Completed Work

#### 1. Database Schema Migration

A comprehensive SQL migration file has been created at `supabase/migrations/20250310_manufacturing_schema.sql` containing:

- Enums for `user_role`, `machine_status`, and `downtime_reason`
- Tables for manufacturing hierarchy (companies, sites, value streams, cells)
- Tables for production tracking (machines, production logs, downtime logs)
- Tables for metrics and analysis (efficiency metrics, bottleneck analysis)
- Row-level security policies and performance indexes for all tables

An additional migration for parts has been created at `supabase/migrations/20250325_parts_schema.sql` containing:
- Parts table with machine cycle times and bottleneck information
- Associated row-level security policies
- Performance indexes

#### 2. TypeScript Schema Definitions

Drizzle schema files have been created at:

- `db/schema/manufacturing-schema.ts` - For company, site, value stream, and cell entities
- `db/schema/production-schema.ts` - For machines and logs
- `db/schema/metrics-schema.ts` - For efficiency metrics and bottleneck analysis
- `db/schema/parts-schema.ts` - For parts and their cycle times

Updates have been made to existing files:
- `db/schema/profiles-schema.ts` - Added role field
- `db/schema/index.ts` - Now exports all new schemas
- `db/db.ts` - Updated to include all new tables in the schema object

#### 3. Server Actions Implementation

Created server action files for:

##### Manufacturing Hierarchy:
- `actions/db/companies-actions.ts` - CRUD operations for companies
- `actions/db/sites-actions.ts` - CRUD operations for sites
- `actions/db/value-streams-actions.ts` - CRUD operations for value streams
- `actions/db/cells-actions.ts` - CRUD operations for cells
- `actions/db/user-assignments-actions.ts` - CRUD operations for user assignments

##### Production:
- `actions/db/machines-actions.ts` - CRUD operations for machines with status updates
- `actions/db/production-logs-actions.ts` - Start/complete production cycles
- `actions/db/downtime-logs-actions.ts` - Log downtime events
- `actions/db/parts-actions.ts` - CRUD operations for parts with cycle times

##### Analytics:
- `actions/db/efficiency-metrics-actions.ts` - Calculate efficiency metrics
- `actions/db/bottleneck-analysis-actions.ts` - Identify bottlenecks

All server actions include:
- Input validation using Zod
- Proper error handling with structured responses
- TypeScript typing for params and return values
- Consistent patterns following project standards

#### 4. Core UI Components Implementation

Developed manufacturing-specific UI components following Next.js App Router architecture:

##### Production Tracking:
- `app/manufacturing/page.tsx` - Main production tracking page with proper server/client pattern
- `app/manufacturing/_components/hour-x-hour-tracker.tsx` - Real-time production tracking component
- `app/manufacturing/_components/production-tracker-skeleton.tsx` - Loading state for production tracker

##### Efficiency Analysis:
- `app/manufacturing/analytics/page.tsx` - Analytics dashboard page
- `app/manufacturing/_components/efficiency-dashboard.tsx` - Dashboard for visualizing efficiency metrics
- `app/manufacturing/_components/metrics-skeleton.tsx` - Loading state for efficiency metrics

##### Manufacturing Hierarchy Management:
- `app/manufacturing/companies/page.tsx` - Companies management page
- `app/manufacturing/sites/page.tsx` - Sites management page
- `app/manufacturing/value-streams/page.tsx` - Value streams management page
- `app/manufacturing/cells/page.tsx` - Cells management page
- `app/manufacturing/machines/page.tsx` - Machines management page
- `app/manufacturing/_components/companies-manager.tsx` - Component for managing companies
- `app/manufacturing/_components/sites-manager.tsx` - Component for managing sites
- `app/manufacturing/_components/value-streams-manager.tsx` - Component for managing value streams
- `app/manufacturing/_components/cells-manager.tsx` - Component for managing cells
- `app/manufacturing/_components/machines-manager.tsx` - Component for managing machines
- `app/manufacturing/_components/new-cell-dialog.tsx` - Dialog for creating and editing cells
- `app/manufacturing/_components/new-machine-dialog.tsx` - Dialog for creating and editing machines

##### Part Management:
- `app/manufacturing/input/page.tsx` - Data input page for parts and setup times
- `app/manufacturing/_components/new-part-dialog.tsx` - Dialog for creating and editing parts
- `app/manufacturing/_components/parts-manager.tsx` - Component for managing parts

##### Navigation and Layout:
- `app/manufacturing/_components/manufacturing-navbar.tsx` - Navigation bar for manufacturing pages

All components follow the frontend architecture guidelines:
- Server components for data fetching
- Client components with "use client" directive for interactivity
- Proper TypeScript interfaces for props and data
- ShadCN UI for consistent component styling
- Responsive design patterns

#### 5. Server Component Architecture Refinement

- Implemented proper "use server" directive placement in server components
- Fixed issues with metadata exports in server components
- Ensured proper async/non-async function separation
- Resolved module import issues for theme switching and other components

#### 6. UI Enhancements and Visual Improvements

- Updated the landing page to reflect the Manufacturing Efficiency Tracking System
- Redesigned the hero section with animated gradient text and descriptive content
- Created feature cards with animated gradient borders on hover
- Added a fluid mouse-tracking grid effect to the hero section
- Reorganized the navigation bar with dropdown menus for better organization
- Implemented dark mode compatibility throughout the application
- Added responsive design improvements for all screen sizes

### Next Steps

#### 1. Apply Database Migrations

```bash
# Run this command to apply the migrations
supabase db push
```

- Verify all tables appear in the Supabase dashboard
- Check that relationships are properly established
- Confirm RLS policies are functioning as expected

#### 2. Complete Production Tracking UI

- Finish the Hour X Hour tracker implementation:
  - Fix any remaining TypeScript errors in calendar components
  - Complete the production cycle completion functionality
  - Implement lunch break and time difference tracking
  - Add proper error handling for all user interactions
  - Ensure proper cell selection before adding parts
  - **Remove the test part function** and replace with proper part selection
  - Create a form to add parts based on the manufacturing hierarchy

- Add additional production visualizations:
  - Implement attainment percentage indicators
  - Create time-series charts for production efficiency
  - Add machine utilization displays

#### 3. Enhance Hierarchical Navigation

- Improve company/site/value stream/cell navigation components
- Implement dropdown selectors for filtering data by hierarchy level
- Add breadcrumb navigation for current context
- Ensure proper data relationships between hierarchy levels

#### 4. Finalize Analytics Dashboard

- Complete efficiency metrics charts using Recharts
- Implement date range selection for historical analysis
- Add bottleneck detection visualizations
- Create export functionality for reports (CSV/PDF)

#### 5. Database Integration Testing

- Test saving all production data to the database
- Verify data relationships and constraints
- Implement proper error handling for database operations
- Create comprehensive tests for all CRUD operations
- Validate data integrity across the application

#### 6. Add Role-Based Access Control

- Implement permission checks based on user roles
- Create admin interface for role management
- Restrict access to sensitive operations based on permissions

#### 7. Optimize Performance

- Implement proper data fetching patterns with Suspense
- Add caching mechanisms for frequently accessed data
- Optimize component re-renders with proper memoization
- Ensure responsive design across all screen sizes

#### 8. Add Real-Time Updates

- Implement WebSocket connections for live data updates
- Add notifications for critical efficiency changes
- Create real-time collaboration features

#### 9. Clean Up Legacy Components

- Remove unnecessary contacts components
- Clean up unused routes and pages
- Update navigation to focus on manufacturing features
- Ensure proper redirects from legacy routes

### Implementation Timeline

- **Phase 1** (Completed): Database schema migration
- **Phase 2** (Completed): Server actions and basic UI components
- **Phase 3** (Completed): Manufacturing hierarchy management UI
  - Companies, sites, value streams, cells, and machines management
  - Dialog components for creating and editing entities
  - Navigation between hierarchy levels
- **Phase 4** (Completed): UI enhancements and visual improvements
  - Landing page redesign
  - Navigation reorganization
  - Dark mode compatibility
  - Interactive UI elements
- **Phase 5** (In Progress): Production tracking UI completion
  - Hour X Hour tracker finalization
  - Part management interface improvements
  - Setup time configuration
  - Removing test functions and implementing proper forms
- **Phase 6** (Next): Database integration testing
  - Testing all CRUD operations
  - Validating data relationships
  - Ensuring data integrity
- **Phase 7**: Analytics dashboard development
  - Efficiency metrics visualization
  - Bottleneck analysis tools
  - Historical data reporting
- **Phase 8**: Role-based access and permissions
- **Phase 9**: Real-time functionality
- **Phase 10**: Legacy component cleanup and UI polish
  - Removing contacts components
  - Cleaning up unused routes
  - Final performance optimization

### Architectural Considerations

Throughout this migration, we're maintaining:
- Server/client component separation following Next.js best practices
- Strong TypeScript typing for all components and data
- Consistent UI patterns using ShadCN components
- Proper loading states with Suspense boundaries
- Accessibility considerations for all interactive elements

This approach allows us to leverage the existing codebase while completely transforming its functionality to serve as a sophisticated manufacturing efficiency tracking system.
